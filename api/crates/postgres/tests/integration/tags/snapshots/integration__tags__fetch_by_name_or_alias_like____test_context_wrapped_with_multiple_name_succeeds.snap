---
source: crates/postgres/tests/integration/tags/fetch_by_name_or_alias_like.rs
expression: ctx.queries()
---
[[queries]]
sql = '''
SELECT
  "tags"."id"
FROM
  "tags"
INNER JOIN
  "tag_paths" ON "tag_paths"."descendant_id" = "tags"."id"
  AND "tag_paths"."ancestor_id" <> $1
INNER JOIN
  "tags" AS "tag_ancestors" ON "tag_ancestors"."id" = "tag_paths"."ancestor_id"
LEFT JOIN
  (
    SELECT
      "id",
      unnest("aliases") AS "alias"
    FROM
      "tags"
  ) AS "tags_aliases" ON "tags_aliases"."id" = "tags"."id"
LEFT JOIN
  (
    SELECT
      "id",
      unnest("aliases") AS "alias"
    FROM
      "tags"
  ) AS "tag_ancestors_aliases" ON "tag_ancestors_aliases"."id" = "tag_ancestors"."id"
GROUP BY
  "tags"."id"
HAVING
  (
    bool_or(
      ("tag_ancestors"."name" ILIKE $2)
      OR ("tag_ancestors"."kana" ILIKE $3)
      OR ("tag_ancestors_aliases"."alias" ILIKE $4)
    )
  )
  AND (
    bool_or(
      ("tag_ancestors"."name" ILIKE $5)
      OR ("tag_ancestors"."kana" ILIKE $6)
      OR ("tag_ancestors_aliases"."alias" ILIKE $7)
    )
  )
ORDER BY
  bool_or(
    "tags"."name" = $8
    OR "tags"."name" = $9
  ) DESC,
  bool_or(
    "tags"."kana" = $10
    OR "tags"."kana" = $11
  ) DESC,
  bool_or(
    COALESCE("tags_aliases"."alias" = $12, $13)
    OR COALESCE("tags_aliases"."alias" = $14, $15)
  ) DESC,
  MAX(
    (
      (
        array_length(
          string_to_array(UPPER("tags"."name"), UPPER($16)),
          $17
        )
      ) - $18
    ) + (
      (
        array_length(
          string_to_array(UPPER("tags"."name"), UPPER($19)),
          $20
        )
      ) - $21
    )
  ) DESC,
  SUM(
    (
      (
        array_length(
          string_to_array(UPPER("tags"."name"), UPPER($22)),
          $23
        )
      ) - $24
    ) + (
      (
        array_length(
          string_to_array(UPPER("tags"."name"), UPPER($25)),
          $26
        )
      ) - $27
    )
  ) DESC,
  (
    MIN(
      NULLIF(strpos(UPPER("tags"."name"), UPPER($28)), $29)
    ),
    MIN(
      NULLIF(strpos(UPPER("tags"."name"), UPPER($30)), $31)
    )
  ) ASC,
  (
    MIN(
      NULLIF(strpos(UPPER("tags"."kana"), UPPER($32)), $33)
    ),
    MIN(
      NULLIF(strpos(UPPER("tags"."kana"), UPPER($34)), $35)
    )
  ) ASC,
  bool_or(
    "tag_ancestors"."name" = $36
    OR "tag_ancestors"."name" = $37
  ) DESC,
  bool_or(
    "tag_ancestors"."kana" = $38
    OR "tag_ancestors"."kana" = $39
  ) DESC,
  bool_or(
    COALESCE("tag_ancestors_aliases"."alias" = $40, $41)
    OR COALESCE("tag_ancestors_aliases"."alias" = $42, $43)
  ) DESC,
  MAX(
    (
      (
        array_length(
          string_to_array(UPPER("tag_ancestors"."name"), UPPER($44)),
          $45
        )
      ) - $46
    ) + (
      (
        array_length(
          string_to_array(UPPER("tag_ancestors"."name"), UPPER($47)),
          $48
        )
      ) - $49
    )
  ) DESC,
  SUM(
    (
      (
        array_length(
          string_to_array(UPPER("tag_ancestors"."name"), UPPER($50)),
          $51
        )
      ) - $52
    ) + (
      (
        array_length(
          string_to_array(UPPER("tag_ancestors"."name"), UPPER($53)),
          $54
        )
      ) - $55
    )
  ) DESC,
  (
    MIN(
      NULLIF(
        strpos(UPPER("tag_ancestors"."name"), UPPER($56)),
        $57
      )
    ),
    MIN(
      NULLIF(
        strpos(UPPER("tag_ancestors"."name"), UPPER($58)),
        $59
      )
    )
  ) ASC,
  (
    MIN(
      NULLIF(
        strpos(UPPER("tag_ancestors"."kana"), UPPER($60)),
        $61
      )
    ),
    MIN(
      NULLIF(
        strpos(UPPER("tag_ancestors"."kana"), UPPER($62)),
        $63
      )
    )
  ) ASC,
  "tags"."kana" ASC'''
rows_affected = 1
rows_returned = 1

[[queries]]
sql = '''
SELECT
  "tag_orders"."order",
  "distance",
  "tag_ancestors"."id" AS "ancestor_id",
  "tag_ancestors"."name" AS "ancestor_name",
  "tag_ancestors"."kana" AS "ancestor_kana",
  "tag_ancestors"."aliases" AS "ancestor_aliases",
  "tag_ancestors"."created_at" AS "ancestor_created_at",
  "tag_ancestors"."updated_at" AS "ancestor_updated_at",
  "tag_descendants"."id" AS "descendant_id",
  "tag_descendants"."name" AS "descendant_name",
  "tag_descendants"."kana" AS "descendant_kana",
  "tag_descendants"."aliases" AS "descendant_aliases",
  "tag_descendants"."created_at" AS "descendant_created_at",
  "tag_descendants"."updated_at" AS "descendant_updated_at"
FROM
  "tag_paths"
LEFT JOIN
  (
    SELECT
      "column1" AS "order",
      "column2" AS "id"
    FROM
      (
        VALUES
          ($1, $2), ($3, $4)) AS "tag_orders"
  ) AS "tag_orders" ON "tag_orders"."id" = "descendant_id"
  AND "ancestor_id" IN ("descendant_id", $5)
INNER JOIN
  "tags" AS "tag_ancestors" ON "tag_ancestors"."id" = "tag_paths"."ancestor_id"
INNER JOIN
  "tags" AS "tag_descendants" ON "tag_descendants"."id" = "tag_paths"."descendant_id"
WHERE
  (
    "distance" = $6
    AND "ancestor_id" IN ($7)
  )
  OR (
    "distance" <= $8
    AND "descendant_id" IN (
      SELECT
        "ancestor_id"
      FROM
        "tag_paths"
      WHERE
        "distance" <= $9
        AND "descendant_id" IN ($10)
    )
  )
  OR (
    "distance" <= $11
    AND "ancestor_id" IN (
      SELECT
        "descendant_id"
      FROM
        "tag_paths"
      WHERE
        "distance" <= $12
        AND "ancestor_id" IN ($13)
    )
  )
ORDER BY
  "distance" ASC,
  "tag_orders"."order" ASC,
  "tag_ancestors"."kana" ASC,
  "tag_descendants"."kana" ASC'''
rows_affected = 6
rows_returned = 6
