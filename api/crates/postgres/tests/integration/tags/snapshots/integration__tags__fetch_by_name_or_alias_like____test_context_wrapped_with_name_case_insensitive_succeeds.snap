---
source: crates/postgres/tests/integration/tags/fetch_by_name_or_alias_like.rs
expression: ctx.queries()
---
[[queries]]
sql = '''
SELECT
  "tags"."id"
FROM
  "tags"
INNER JOIN
  "tag_paths" ON "tag_paths"."descendant_id" = "tags"."id"
  AND "tag_paths"."ancestor_id" <> '00000000-0000-0000-0000-000000000000'
INNER JOIN
  "tags" AS "tag_ancestors" ON "tag_ancestors"."id" = "tag_paths"."ancestor_id"
LEFT JOIN
  (
    SELECT
      "id",
      COUNT("id") AS "count"
    FROM
      (
        SELECT
          "id",
          unnest("aliases") AS "alias"
        FROM
          "tags"
      ) AS "tags_aliases"
    WHERE
      "alias" ILIKE $1
    GROUP BY
      "id"
  ) AS "tags_aliases" ON "tags_aliases"."id" = "tags"."id"
  AND "tag_paths"."ancestor_id" = "tag_paths"."descendant_id"
LEFT JOIN
  (
    SELECT
      "id",
      COUNT("id") AS "count"
    FROM
      (
        SELECT
          "id",
          unnest("aliases") AS "alias"
        FROM
          "tags"
      ) AS "tag_ancestors_aliases"
    WHERE
      "alias" ILIKE $2
    GROUP BY
      "id"
  ) AS "tag_ancestors_aliases" ON "tag_ancestors_aliases"."id" = "tags"."id"
  AND "tag_paths"."ancestor_id" <> "tag_paths"."descendant_id"
GROUP BY
  "tags"."id"
HAVING
  bool_or(
    ("tag_ancestors"."name" ILIKE $3)
    OR ("tag_ancestors"."kana" ILIKE $4)
    OR "tag_ancestors_aliases"."count" > 0
    OR "tags_aliases"."count" > 0
  )
ORDER BY
  UPPER("tags"."name") = UPPER($5) DESC,
  UPPER("tags"."kana") = UPPER($6) DESC,
  (
    array_length(
      string_to_array(UPPER("tags"."name"), UPPER($7)),
      1
    )
  ) - 1 DESC,
  (
    NULLIF(strpos(UPPER("tags"."name"), UPPER($8)), 0)
  ) ASC,
  (
    NULLIF(strpos(UPPER("tags"."kana"), UPPER($9)), 0)
  ) ASC,
  SUM(COALESCE("tags_aliases"."count", 0)) DESC,
  bool_or(UPPER("tag_ancestors"."name") = UPPER($10)) DESC,
  bool_or(UPPER("tag_ancestors"."kana") = UPPER($11)) DESC,
  MAX(
    (
      array_length(
        string_to_array(UPPER("tag_ancestors"."name"), UPPER($12)),
        1
      )
    ) - 1
  ) DESC,
  SUM(
    (
      array_length(
        string_to_array(UPPER("tag_ancestors"."name"), UPPER($13)),
        1
      )
    ) - 1
  ) DESC,
  (
    MIN(
      NULLIF(
        strpos(UPPER("tag_ancestors"."name"), UPPER($14)),
        0
      )
    )
  ) ASC,
  (
    MIN(
      NULLIF(
        strpos(UPPER("tag_ancestors"."kana"), UPPER($15)),
        0
      )
    )
  ) ASC,
  SUM(COALESCE("tag_ancestors_aliases"."count", 0)) DESC,
  "tags"."kana" ASC'''
rows_affected = 5
rows_returned = 5

[[queries]]
sql = '''
SELECT
  "tag_orders"."order",
  "distance",
  "tag_ancestors"."id" AS "ancestor_id",
  "tag_ancestors"."name" AS "ancestor_name",
  "tag_ancestors"."kana" AS "ancestor_kana",
  "tag_ancestors"."aliases" AS "ancestor_aliases",
  "tag_ancestors"."created_at" AS "ancestor_created_at",
  "tag_ancestors"."updated_at" AS "ancestor_updated_at",
  "tag_descendants"."id" AS "descendant_id",
  "tag_descendants"."name" AS "descendant_name",
  "tag_descendants"."kana" AS "descendant_kana",
  "tag_descendants"."aliases" AS "descendant_aliases",
  "tag_descendants"."created_at" AS "descendant_created_at",
  "tag_descendants"."updated_at" AS "descendant_updated_at"
FROM
  "tag_paths"
LEFT JOIN
  (
    SELECT
      "column1" AS "order",
      "column2" AS "id"
    FROM
      (
        VALUES
          ($1, $2),
          ($3, $4),
          ($5, $6),
          ($7, $8),
          ($9, $10),
          ($11, $12)
      ) AS "tag_orders"
  ) AS "tag_orders" ON "tag_orders"."id" = "descendant_id"
  AND "ancestor_id" IN (
    "descendant_id",
    '00000000-0000-0000-0000-000000000000'
  )
INNER JOIN
  "tags" AS "tag_ancestors" ON "tag_ancestors"."id" = "tag_paths"."ancestor_id"
INNER JOIN
  "tags" AS "tag_descendants" ON "tag_descendants"."id" = "tag_paths"."descendant_id"
WHERE
  (
    "distance" = 0
    AND "ancestor_id" IN ($13, $14, $15, $16, $17)
  )
  OR (
    "distance" <= 1
    AND "descendant_id" IN (
      SELECT
        "ancestor_id"
      FROM
        "tag_paths"
      WHERE
        "distance" <= $18
        AND "descendant_id" IN ($19, $20, $21, $22, $23)
    )
  )
  OR (
    "distance" <= 1
    AND "ancestor_id" IN (
      SELECT
        "descendant_id"
      FROM
        "tag_paths"
      WHERE
        "distance" <= $24
        AND "ancestor_id" IN ($25, $26, $27, $28, $29)
    )
  )
ORDER BY
  "distance" ASC,
  "tag_orders"."order" ASC,
  "tag_ancestors"."kana" ASC,
  "tag_descendants"."kana" ASC'''
rows_affected = 11
rows_returned = 11
