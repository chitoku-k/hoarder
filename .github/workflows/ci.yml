name: CI Workflow
on:
  push:
    branches:
      - master
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  api-lint:
    name: API Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up reviewdog
        uses: reviewdog/action-setup@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v6
        id: build
        env:
          DOCKER_BUILD_SUMMARY: false
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: ./api
          target: base
          cache-from: type=gha,scope=${{ github.ref_name }}-test
          cache-to: type=gha,scope=${{ github.ref_name }}-test,mode=max
          load: true
      - name: Run clippy
        working-directory: api
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker run --rm ${{ steps.build.outputs.imageid }} \
            cargo clippy --tests --workspace --quiet --message-format=short --color=never 2>&1 |
            reviewdog -f=clippy -reporter=github-pr-annotations -filter-mode=nofilter -fail-level=any -tee

  api-test:
    name: API Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.2
        env:
          PGDATA: /dev/shm/pgdata/data
          POSTGRES_DB: hoarder_test
          POSTGRES_USER: hoarder_test
          POSTGRES_PASSWORD: hoarder_test
        volumes:
          - postgresql:/var/run/postgresql
        options: >-
          --shm-size=512m
          --tmpfs=/var/lib/postgresql/data
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v6
        id: build
        env:
          DOCKER_BUILD_SUMMARY: false
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: ./api
          target: base
          cache-from: type=gha,scope=${{ github.ref_name }}-test
          cache-to: type=gha,scope=${{ github.ref_name }}-test,mode=max
          load: true
      - name: Run tests
        working-directory: api
        run: |
          docker run \
            --rm \
            --env=PGHOST=/postgresql \
            --env=PGDATABASE=hoarder_test \
            --env=PGUSER=hoarder_test \
            --volume=postgresql:/postgresql \
            ${{ steps.build.outputs.imageid }} \
            cargo test --workspace --no-default-features

  build:
    name: Build ${{ matrix.app }} (${{ matrix.target.platform }})
    strategy:
      matrix:
        app:
          - api
          - ui
        target:
          - label: ubuntu-24.04
            platform: linux/amd64
            multiarch: x86_64-linux-gnu
            ld: /lib64/ld-linux-x86-64.so.2
          - label: ubuntu-24.04-arm
            platform: linux/arm64
            multiarch: aarch64-linux-gnu
            ld: /lib/ld-linux-aarch64.so.1
    runs-on: ${{ matrix.target.label }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into Container Registry
        if: ${{ github.ref_name == 'master' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build
        uses: docker/bake-action@v6
        id: build
        with:
          source: .
          files: docker-bake.hcl
          targets: ${{ matrix.app }}
          set: |
            ${{ matrix.app }}.tags=ghcr.io/chitoku-k/hoarder/${{ matrix.app }}
            *.platform=${{ matrix.target.platform }}
            *.args.DEB_BUILD_MULTIARCH=${{ matrix.target.multiarch }}
            *.args.LD=${{ matrix.target.ld }}
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
            *.output=type=image,push=${{ github.ref_name == 'master' }},push-by-digest=${{ github.ref_name == 'master' }}
      - name: Save digests
        if: ${{ github.ref_name == 'master' }}
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest=${{ fromJSON(steps.build.outputs.metadata)[matrix.app]['containerimage.digest'] }}
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      - name: Upload digests
        if: ${{ github.ref_name == 'master' }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.app }}-${{ matrix.target.multiarch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  combine:
    name: Combine ${{ matrix.app }} images
    if: ${{ github.ref_name == 'master' }}
    strategy:
      matrix:
        app:
          - api
          - ui
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ matrix.app }}-*
          merge-multiple: true
      - name: Log into Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create \
            --tag=ghcr.io/chitoku-k/hoarder/${{ matrix.app }}:latest \
            $(printf 'ghcr.io/chitoku-k/hoarder/${{ matrix.app }}@sha256:%s' *)

  update-schema:
    name: Update GraphQL Schema
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GIT_AUTHOR_NAME: 'github-actions[bot]'
      GIT_AUTHOR_EMAIL: '41898282+github-actions[bot]@users.noreply.github.com'
      GIT_COMMITTER_NAME: 'github-actions[bot]'
      GIT_COMMITTER_EMAIL: '41898282+github-actions[bot]@users.noreply.github.com'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || '' }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v6
        id: build
        env:
          DOCKER_BUILD_SUMMARY: false
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: ./api
          target: debug
          cache-from: type=gha,scope=${{ github.ref_name }}-debug
          cache-to: type=gha,scope=${{ github.ref_name }}-debug,mode=max
          load: true
      - name: Update GraphQL Schema
        run: |
          docker run --rm ${{ steps.build.outputs.imageid }} hoarder schema print > ./schema/hoarder.gql

          if git diff --exit-code &> /dev/null; then
            exit 0
          fi

          git add ./schema/hoarder.gql
          git commit --message="Update GraphQL Schema"
          git push
