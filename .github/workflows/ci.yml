name: CI Workflow
on:
  push:
    branches:
      - master
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  api-test:
    name: API Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up reviewdog
        uses: reviewdog/action-setup@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v6
        id: build
        with:
          context: ./api
          target: dev
          cache-from: type=gha,scope=${{ github.ref_name }}-test
          cache-to: type=gha,scope=${{ github.ref_name }}-test,mode=max
          load: true
      - name: Run tests
        if: ${{ always() && steps.build.conclusion == 'success' }}
        working-directory: api
        run: |
          docker run --rm --volume=/var/run/docker.sock:/var/run/docker.sock:ro --network=host ${{ steps.build.outputs.imageid }} \
            cargo make test --workspace
      - name: Run clippy
        if: ${{ always() && steps.build.conclusion == 'success' }}
        working-directory: api
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker run --rm --volume=/var/run/docker.sock:/var/run/docker.sock:ro ${{ steps.build.outputs.imageid }} \
            cargo clippy --tests --workspace --quiet --message-format=short --color=never 2>&1 |
            reviewdog -f=clippy -reporter=github-pr-annotations -filter-mode=nofilter -fail-level=any -tee

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/bake-action@v6
        with:
          source: .
          files: docker-bake.hcl
          push: ${{ github.ref_name == 'master' }}
          set: |
            api.tags=ghcr.io/chitoku-k/hoarder/api:latest
            ui.tags=ghcr.io/chitoku-k/hoarder/ui:latest
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max

  update-schema:
    name: Update GraphQL Schema
    runs-on: ubuntu-latest
    env:
      GIT_AUTHOR_NAME: 'github-actions[bot]'
      GIT_AUTHOR_EMAIL: '41898282+github-actions[bot]@users.noreply.github.com'
      GIT_COMMITTER_NAME: 'github-actions[bot]'
      GIT_COMMITTER_EMAIL: '41898282+github-actions[bot]@users.noreply.github.com'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || '' }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v6
        id: build
        with:
          context: ./api
          target: debug
          cache-from: type=gha,scope=${{ github.ref_name }}-debug
          cache-to: type=gha,scope=${{ github.ref_name }}-debug,mode=max
          load: true
      - name: Update GraphQL Schema
        run: |
          docker run --rm ${{ steps.build.outputs.imageid }} hoarder schema print > ./schema/hoarder.gql

          if git diff --exit-code &> /dev/null; then
            exit 0
          fi

          git add ./schema/hoarder.gql
          git commit --message="Update GraphQL Schema"
          git push
